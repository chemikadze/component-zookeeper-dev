#### Zookeeper Ensemble ####
application:
# Input Configuration parameters.
# In this section you can set input configuration parameters which you
# will be able to change later in reconfiguration
  configuration:
    input.operating-system: {image: "us-east-1/ami-1ba18d72", identity: ec2-user} ### image/identity pair for describing Operating system.
    input.zookeeper-quantity: 3 ### Zookkeper hosts quantity
    input.zookeeper-cli-port: 2181 #### Port for client connections
    input.zookeeper-elect-port: 3888 ### Port for server connections during the leader election phase
    input.exhibitor-port: 8090 ### Exhibitor ui port
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-zookeeper-dev-cookbooks-stable-a5d5fbf.tar.gz" ### Chef cookbooks Url
    input.instance-size: "m1.small" ###EC2  Instance type

# Root Application Interfaces.
# Here we describe a interfaces with pins and their bindings on components interfaces
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
  interfaces:
    input: #contain pins with type: configuration()
      zookeeper-quantity: "bind(zookeeper#input.zookeeper-quantity)"  ### Here we bind pin 'input.zookeeper-quantity' on pin 'input.zookeeper-quantity' in workflow 'zookeeper'
      operating-system: "bind(zookeeper#input.operating-system)"
      zookeeper-cli-port: "bind(zookeeper#input.zookeeper-cli-port)"
      zookeeper-elect-port: "bind(zookeeper#input.zookeeper-elect-port)"
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
      instance-size: "bind(zookeeper#input.instance-size)"
      recipe-url: "bind(zookeeper#input.recipe-url)"
    zoo: ### combined interface for actions/output pins
      zoo-nodes: "bind(zookeeper#result.zookeeper-nodes)"
      zoo-hosts: "bind(zookeeper#result.zookeeper-hosts)"
      zoo-ui: "bind(zookeeper#result.zookeeper-ui)"


####### Components definitions ########
 
  components:
####  Component zookeeper ####
    zookeeper:
      type: workflow.Instance # It's a  component type  to run imperative workflow
      interfaces: # Each component have interfaces wit pins
        input: # Contain pins with type: configuration().
          operating-system:
             type: configuration(map<string,object>) # It's a pin with  configuration type and value will be a map string on left side  object on right side
             suggestions:  ### Create dropdown menu  in advanced launch
                 "centos": {image: "us-east-1/ami-bf5021d6", identity: root} # Here string "centos" mapped on object {image: "us-east-1/ami-bf5021d6", identity: root} etc.
                 "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                 "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu}
                 "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
          instance-size:
             type: configuration(string)
             name: EC2 instance type
          recipe-url:
             type: configuration(string)
             name: Cookbooks  url
          zookeeper-quantity:
             type: configuration(int)
             name: Zookkeper hosts quantity
          zookeeper-cli-port:
             type: configuration(int)
             name: Client port
          zookeeper-elect-port:
             type: configuration(int)
             name: Election port
          exhibitor-port:
             type: configuration(int)
             name: UI port
        actions: {}
        result:
          zookeeper-hosts:
             type: publish-signal(list<string>)
             name: Zoo hosts Public IPs
          zookeeper-ui:
             type: publish-signal(list<string>)
             name: Exhibitiors UI Urls
          zookeeper-nodes:
             type: publish-signal(list<string>)
             name: Zoo hosts Private IPs
      configuration:
        configuration.workflows:
          launch: ### Launch workflow used for provision/install phase
            steps:
              - provision: ### Action "provisionAmazonVm" provision vm on Amazon EC2 and return  ips list
                  action: provisionVms
                  phase: provision
                  parameters:
                    roleName: default
                    hardwareId: "{$.instance-size}"
                    quantity: "{$.zookeeper-quantity}"
                    vmIdentity: "{$.operating-system.identity}"
                    imageId: "{$.operating-system.image}"
                  output: ### Step output values will be used in workflow return section below
                    zoo-hosts: ips
                    zoo-hosts-privatIp: privateips
              - deploy-zoo: ### Action "chefrun" downloads cookbooks archive by specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefrun"
                  phase: deploy-zoo
                  precedingPhases: [ provision ]
                  parameters:
                    isSolo: true
                    retryCount: 3
                    roles: [ default ]
                    runList: [ "recipe[cookbook-qubell-zookeeper]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      exhibitor:
                        opts:
                          port: "{$.exhibitor-port}"
                        defaultconfig:
                          client_port: "{$.zookeeper-cli-port}"
                          election_port: "{$.zookeeper-elect-port}"
                          auto_manage_instances_settling_period_ms: 1000
                      zookeeper:
                        mirror: "http://pkgs.fedoraproject.org/repo/pkgs/zookeeper/zookeeper-3.4.5.tar.gz/f64fef86c0bf2e5e0484d19425b22dcb/zookeeper-3.4.5.tar.gz"
                        hosts: "{$.zoo-hosts-privatIp}"
            return: ### Values returned from workflow
              zookeeper-hosts:
                value: "{$.zoo-hosts}"
              zookeeper-ui:
                value: "http://{$.zoo-hosts}:{$.exhibitor-port}/exhibitor/v1/ui/index.html"
              zookeeper-nodes:
                value: "{$.zoo-hosts-privatIp}"

