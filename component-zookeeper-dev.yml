application:
  configuration:
    input.zookeeper-quantity: "3"
    input.zookeeper-cli-port: "2181"
    input.zookeeper-elect-port: "3888"
    input.exhibitor-port: "8090"

  interfaces:
    input:
      zookeeper-quantity: "bind(zookeeper#input.zookeeper-quantity)"
      zookeeper-cli-port: "bind(zookeeper#input.zookeeper-cli-port)"
      zookeeper-elect-port: "bind(zookeeper#input.zookeeper-elect-port)"
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
    output:
      zoo-nodes: "bind(zookeeper#result.zookeeper-nodes)"
      zoo-hosts: "bind(zookeeper#result.zookeeper-hosts)"
      zoo-ui: "bind(zookeeper#result.zookeeper-ui)"

  bindings:
    - [zookeeper, wfService]
    - [zookeeper, secureStore]

  components:
    wfService:
      type: reference.Service
      interfaces:
        executor:
          execute-workflow: receive-command(object request => object status => object status)
          execute-command: send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)

    secureStore:
      type: reference.Service
      interfaces:
        keypair-store:
          get-keypair: receive-command(string id => object privateKey)

    zookeeper:
      type: workflow.Instance
      interfaces:
        input:
          zookeeper-quantity: configuration(string)
          zookeeper-cli-port: configuration(string)
          zookeeper-elect-port: configuration(string)
          exhibitor-port: configuration(string)
        actions: {}
        result:
          zookeeper-hosts: publish-signal(list<string>)
          zookeeper-ui: publish-signal(list<string>)
          zookeeper-nodes: publish-signal(string)

        keypair-store: 
          get-keypair: send-command(string id => object privateKey)

      required: [keypair-store]

      configuration:
        configuration.workflows:
          launch:
            parameters:
              - zookeeper-quantity:
                  description: Number of servers
              - zookeeper-cli-port:
                  description: Zookeeper port for connections
              - zookeeper-elect-port:
                  description: Zookeeper port for elections
              - exhibitor-port:
                  description: Zookeeper management UI port
            steps:
              - provision:
                  action: provisionAmazonVm
                  phase: provision
                  parameters:
                    roleName: default
                    hardwareId: m1.small
                    targetQuantity: "{$.zookeeper-quantity}"
                    retryCount: 1
                    jcloudsProvider: aws-ec2
                    jcloudsEndpoint: https://ec2.us-east-1.amazonaws.com
                    jcloudsRegions: us-east-1
                    jcloudsNodeNamePrefix: component
                    jcloudsIdentity: "{$.identity}"
                    jcloudsCredential: "{$.credential}"
                    vmIdentity: ubuntu
                    imageId: us-east-1/ami-0fac7566
                    ec2SecurityGroup: default
                  output:
                    zoo-hosts: ips
                    zoo-hosts-privatIp: privateips
              - deploy-zoo:
                  action: "chefrun"
                  phase: deploy-zoo
                  precedingPhases: [ provision ]
                  parameters:
                    isSolo: true
                    roles: [ default ]
                    runList: [ "recipe[zookeeper-component]" ]
                    recipeUrl: "https://dl.dropboxusercontent.com/u/250836/zoo-cloud.tar.gz"
                    jattrs:
                      exhibitor:
                        opts:
                          port: "{$.exhibitor-port}"
                        defaultconfig:
                          client_port: "{$.zookeeper-cli-port}"
                          election_port: "{$.zookeeper-elect-port}"
                      zookeeper:
                        hosts: "{$.zoo-hosts-privatIp}"
              - provision-node:
                  action: provisionVms
                  phase: provision-node
                  precedingPhases: [ deploy-zoo ]
                  parameters:
                    roleName: exec-vm
                    hardwareId: ""
                    vmIdentity: ubuntu
                    retryCount: 0
                    staticIps: ["{$.zoo-hosts[0]}"]
              - serialize-nodes:
                  action: serialize
                  phase: serialize-nodes
                  precedingPhases: [provision-node]
                  parameters:
                    format: CSV
                    input: ["{$.zoo-hosts-privatIp}:{$.zookeeper-cli-port}"]
                  output:
                    serialived-nodes: serialized
              - return-zoo-uri:
                  action: "execrun"
                  phase: return-zoo-uri
                  precedingPhases: [serialize-nodes]
                  parameters:
                    roles: [exec-vm]
                    command:
                      - bash
                      - "-c"
                      - !
                        nodes={$.serialived-nodes}
                        echo -n $$nodes | tr -d '"'
                  output:
                    zoo-uri: stdout

            return:
              zookeeper-hosts:
                value: "{$.zoo-hosts}"
              zookeeper-ui:
                value: "http://{$.zoo-hosts}:{$.exhibitor-port}/exhibitor/v1/ui/index.html"
              zookeeper-nodes:
                value: "{$.zoo-uri['*'][0]}"

          destroy:
            steps:
              - destroy:
                  action: undeployEnv