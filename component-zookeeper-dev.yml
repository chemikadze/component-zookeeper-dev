#### Zookeeper Ensemble #####
application:
# Input Configuration parameters.
# In this section you can set input configuration parameters which you
# will be able to change later in reconfiguration
  configuration:
    configuration.clusterSize: 3 ### Zookkeper hosts quantity
    configuration.zookeeper-cli-port: 2181 #### Port for client connections
    configuration.zookeeper-elect-port: 3888 ### Port for server connections during the leader election phase
    configuration.exhibitor-port: 8090 ### Exhibitor ui port
    configuration.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-zookeeper-dev-cookbooks-stable-a5d5fbf.tar.gz" ### Chef cookbooks Url
    compute-config.hardwareId: "m1.small" ###EC2  Instance type
    compute-config.imageId: "ami-246ed34c"
    compute-config.login: "ec2-user"
    compute-config.locationId: "us-east-1"
# Root Application Interfaces.
# Here we describe a interfaces with pins and their bindings on components interfaces
# For binding using function bind(Component1#interface.pin, Component2#interface.pin)
  interfaces:
    configuration:
      zookeeper-cli-port: "bind(zookeeper#input.zookeeper-cli-port)"
      zookeeper-elect-port: "bind(zookeeper#input.zookeeper-elect-port)"
      exhibitor-port: "bind(zookeeper#input.exhibitor-port)"
      recipe-url: "bind(zookeeper#input.recipe-url)"
      clusterSize: "bind(cluster_commander#input.clusterSize)"
    app-meta:
      application-pic: "bind(metadata#output.application-pic)"
    compute-config:
      hardwareId: "bind(cluster.compute#configuration.hardwareId)"
      imageId:    "bind(cluster.compute#configuration.imageId)"
      login:      "bind(cluster.compute#configuration.login)"
      locationId: "bind(cluster.compute#configuration.locationId)"
    zoo: ### combined interface for actions/output pins
      zoo-nodes: "bind(zookeeper#result.zookeeper-nodes)"
      zoo-hosts: "bind(zookeeper#result.zookeeper-hosts)"
      zoo-ui: "bind(zookeeper#result.zookeeper-ui)"
      zoo-urls: "bind(zookeeper#result.zookeeper-urls)"
    scale:
      set-quantity: "bind(cluster#scale.set-quantity)"

  bindings:
    - [cluster_commander, cluster]
    - [zookeeper, cluster.compute]
####### Components definitions ########
 
  components:
    metadata:
      type: cobalt.common.Constants
      interfaces:
        output:
          application-pic:
            type: publish-signal(map<string, object>)
            name: ""
      configuration:
        configuration.values:
          output.application-pic:
            large: "https://s3.amazonaws.com/qubell-images/zookeeper.gif"
            small: "https://s3.amazonaws.com/qubell-images/zookeeper.gif"
            small-height: 112
    cluster_commander:
      type: workflow.Instance
      interfaces:
        input:
          clusterSize: configuration(int)
        scaler:
          set-quantity: send-command(int quantity)
      configuration:
        configuration.triggers:
          input.clusterSize: update
        configuration.propagateStatus: [ update ]
        configuration.workflows:
          update: &update 
            steps:
              - scale:
                  action: scaler.set-quantity
                  parameters:
                    quantity: "{$.clusterSize}"
              - get-signals:
                  action: getSignals
                  parameters:
                    multi: true
                  output:
                    signals: result
          launch: *update          

    cluster:
      type: composite.Scaler
      components:
        compute:
          type: compute.Instance
####  Component zookeeper ####
    zookeeper:
      type: workflow.Instance # It's a  component type  to run imperative workflow
      interfaces: # Each component have interfaces wit pins
        input: # Contain pins with type: configuration().
          recipe-url:
             type: configuration(string)
             name: Cookbooks  url
          zookeeper-cli-port:
             type: configuration(int)
             name: Client port
          zookeeper-elect-port:
             type: configuration(int)
             name: Election port
          exhibitor-port:
             type: configuration(int)
             name: UI port
        actions: {}
        compute:
          networks:   consume-signal(map<string, map<string, string>>)
          exec:       send-command(string command, int timeout => string stdOut, string stdErr => string stdOut, string stdErr, int exitCode)
          put-file:   send-command(string filename, bytes payload)
          get-file:   send-command(string filename => bytes payload)
        result:
          zookeeper-hosts:
             type: publish-signal(list<string>)
             name: Zoo hosts Public IPs
          zookeeper-ui:
             type: publish-signal(list<string>)
             name: Exhibitiors UI Urls
          zookeeper-nodes:
             type: publish-signal(list<string>)
             name: Zoo hosts Private IPs
          zookeeper-urls:
             type: publish-signal(list<string>)
             name: Zookeper urls (private)
      required: [compute]
      configuration:
        configuration.workflows:
          update: &update  ### Launch workflow used for provision/install phase
            steps:
              - waitPeers:
                   action: waitPeers
                   parameters:
                     interfaces:
                       compute: 3
                     timeout:
                       10 minute
              - get-signals:
                   action: getSignals
                   precedingPhases: [waitPeers]
                   parameters:
                     multi: true
                   output:
                     signals: result
              - deploy-zoo: ### Action "chefrun" downloads cookbooks archive by specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefrun"
                  phase: deploy-zoo
                  precedingPhases: [get-signals]
                  parameters:
                    isSolo: true
                    retryCount: 3
                    roles: [ compute ]
                    runList: [ "recipe[cookbook-qubell-zookeeper]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      exhibitor:
                        opts:
                          port: "{$.exhibitor-port}"
                        defaultconfig:
                          client_port: "{$.zookeeper-cli-port}"
                          election_port: "{$.zookeeper-elect-port}"
                          auto_manage_instances_settling_period_ms: 1000
                      zookeeper:
                        mirror: "http://pkgs.fedoraproject.org/repo/pkgs/zookeeper/zookeeper-3.4.5.tar.gz/f64fef86c0bf2e5e0484d19425b22dcb/zookeeper-3.4.5.tar.gz"
                        hosts: "{$.signals.compute.*.networks.eth0.ip}"
            return: ### Values returned from workflow
              zookeeper-hosts: { value: "{$.signals.compute.*.networks.public.ip}"}
              zookeeper-ui: { value: "http://{$.signals.compute.*.networks.public.ip}:{$.exhibitor-port}/exhibitor/v1/ui/index.html" }
              zookeeper-nodes: { value: "{$.signals.compute.*.networks.eth0.ip}" }
              zookeeper-urls: { value: "{$.signals.compute.*.networks.eth0.ip}:{$.zookeeper-cli-port}" }
          launch: *update
